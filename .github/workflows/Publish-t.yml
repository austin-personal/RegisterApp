name: Deploy to docker

on:
  push:
    branches:
      - main

env:
  APP_VERSION: "${{ github.run_number }}"
  APP_NAME: "registerapp"
  APP_ENV_NAME: "Registerapp-env"

jobs:
  Test_Web_app:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Install dependencies
      run: npm install
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Start app
      run: npm start -s &
    - name: Wait the app to be started
      run: sleep 10
    - name: Test 1 grep html components
      run: curl http://localhost:8081 | grep "People Registration App"
    - name: Test 2 Mocha Register API test case 
      run: npm test
  
  Build_and_Push_Docker_Image:
    runs-on: ubuntu-latest
    #needs: Test_Web_app
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Log in to Docker Hub
      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }} docker.io
    - name: Build Docker image
      run: docker build -t "${{ secrets.DOCKER_USER }}/${{ secrets.REGISTRY_NAME }}:$APP_VERSION" .
    - name: List docker image
      run: docker image ls
    - name: Push Docker image to Docker Hub
      run: docker push "${{ secrets.DOCKER_USER }}/${{ secrets.REGISTRY_NAME }}:$APP_VERSION"
 
  Deploy_to_production:
    runs-on: ubuntu-latest
    needs: [Build_and_Push_Docker_Image]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Check AWS version
      run: aws --version
    - name: Replace secrets in JSON
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
      run: |
        sed -i "s/{{DOCKER_USER}}/$DOCKER_USER/g" template/dockerrun.aws.json
        sed -i "s/{{REGISTRY_NAME}}/$REGISTRY_NAME/g" template/dockerrun.aws.json
    - name: Check dockerrun file
      run: cat template/dockerrun.aws.json
    - name: Upload to S3
      run: aws s3 cp template/dockerrun.aws.json s3://${{ secrets.AWS_S3_BUCKET }}/dockerrun.aws.json
    - name: Create a new application version
      run: aws elasticbeanstalk create-application-version --application-name $APP_NAME --version-label $APP_VERSION --source-bundle S3Bucket=${{ secrets.AWS_S3_BUCKET }},S3Key=dockerrun.aws.json
    - name: Update Environment
      run: aws elasticbeanstalk update-environment --application-name $APP_NAME --environment-name $APP_ENV_NAME --version-label $APP_VERSION 



        